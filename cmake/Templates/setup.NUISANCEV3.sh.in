#!/bin/bash

if ! type add_to_PATH &> /dev/null; then

### Adapted from https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
function add_to_PATH () {
  for d; do

    if [ ! -e "$d" ]; then continue; fi
    d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
    if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

    if [ "$d" == "/usr/bin" ] || [ "$d" == "/usr/bin64" ] || [ "$d" == "/usr/local/bin" ] || [ "$d" == "/usr/local/bin64" ]; then
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$PATH:$d;;
      esac
    else
      case ":$PATH:" in
        *":$d:"*) :;;
        *) export PATH=$d:$PATH;;
      esac
    fi
  done
}

fi

if ! type add_to_PYTHONPATH &> /dev/null; then

### Adapted from https://unix.stackexchange.com/questions/4965/keep-duplicates-out-of-path-on-source
function add_to_PYTHONPATH () {
  for d; do

    if [ ! -e "$d" ]; then continue; fi
    d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
    if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

    if [ "$d" == "/usr/bin" ] || [ "$d" == "/usr/bin64" ] || [ "$d" == "/usr/local/bin" ] || [ "$d" == "/usr/local/bin64" ]; then
      case ":$PYTHONPATH:" in
        *":$d:"*) :;;
        *) export PYTHONPATH=$PYTHONPATH:$d;;
      esac
    else
      case ":$PYTHONPATH:" in
        *":$d:"*) :;;
        *) export PYTHONPATH=$d:$PYTHONPATH;;
      esac
    fi
  done
}

fi


if ! type add_to_LD_LIBRARY_PATH &> /dev/null; then

function add_to_LD_LIBRARY_PATH () {
  for d; do

    if [ ! -e "$d" ]; then continue; fi
    d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
    if [ -z "$d" ]; then continue; fi  # skip nonexistent directory

    if [ "$d" == "/usr/lib" ] || [ "$d" == "/usr/lib64" ] || [ "$d" == "/usr/local/lib" ] || [ "$d" == "/usr/local/lib64" ]; then
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$d;;
      esac
    else
      case ":$LD_LIBRARY_PATH:" in
        *":$d:"*) :;;
        *) export LD_LIBRARY_PATH=$d:$LD_LIBRARY_PATH;;
      esac
    fi
  done
}

fi

# Get directory of script being sourced.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

export NUISANCE_ROOT=$(dirname -- ${SCRIPT_DIR})
export NUISANCE_VERSION=@NUISANCE_VERSION@

# lib64 needed in some containers
add_to_PATH ${NUISANCE_ROOT}/bin
add_to_LD_LIBRARY_PATH ${NUISANCE_ROOT}/lib64
add_to_LD_LIBRARY_PATH ${NUISANCE_ROOT}/lib
add_to_LD_LIBRARY_PATH ${NUISANCE_ROOT}/lib/plugins

# lib64 and python needed in some containers
add_to_PYTHONPATH ${NUISANCE_ROOT}/lib
add_to_PYTHONPATH ${NUISANCE_ROOT}/lib64
add_to_PYTHONPATH ${NUISANCE_ROOT}/python

# PS For the dev box put this as default but should be moved eventually
add_to_PYTHONPATH ${NUISANCE_ROOT}/python/3.9/

export NUISANCEDB=@CMAKE_SOURCE_DIR@/data/

export NUISANCE_PROSELECTA_INCLUDES=${NUISANCE_ROOT}/include/

export NUISANCE_CXX_PATHS="@NUISANCE_INCLUDE_DIRS@"
export NUISANCE_CXX_FLAGS="@NUISANCE_COMPILE_DEFS@"
export NUISANCE_CXX_LIBRARIES="@NUISANCE_LOCATION@"

export NUISANCE_PYBIND_LIBRARIES=${NUISANCE_CXX_LIBRARIES/:/ }
export NUISANCE_PYBIND_FLAGS=${NUISANCE_CXX_FLAGS/:/ }
export NUISANCE_PYBIND_PATHS=${NUISANCE_CXX_PATHS/:/ }

# PS. Needs rethinking
# export CPLUS_INCLUDE_PATH="$NUISANCE_ROOT/include/:$NUISANCE_CXX_PATHS"

# PS For the dev box put this as default but should be moved eventually
export PROSELECTA_DIR=${NUISANCE_ROOT}/include/
unset SETUPDIR


